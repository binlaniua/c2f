{"version":3,"sources":["components/logo.jsx","components/coder.jsx","components/result-alert.jsx","service/convert/converter.js","components/operating-area.jsx","App.js","serviceWorker.js","index.js","assets/image/logo.png"],"names":["Logo","_react_16_9_0_react_default","a","createElement","className","src","logo","width","style","padding","href","target","require","Coder","_this","this","_react_codemirror2_6_0_0_react_codemirror2","value","props","options","Object","assign","theme","lineNumbers","onBeforeChange","editor","data","setState","onChange","console","log","React","Component","ResultAlert","converter","process","_process","asyncToGenerator","regenerator_default","mark","_callee","css","result","root","wrap","_context","prev","next","postcss","sent","abrupt","Promise","resolve","reject","walkRules","rule","selector","walkDecls","decl","prop","stop","_x","apply","arguments","OperatingArea","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","cssOptions","mode","dartOptions","cssVal","dartVal","Converter","result_alert","row","col","span","coder","es_button","type","onClick","clearBtnClickHandler","bind","Content","Layout","App","layout","components_logo","operating_area","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9f5300b3.chunk.js","sourcesContent":["import React from \"react\";\nimport logo from \"../assets/image/logo.png\";\n\nconst Logo = () => {\n  return (\n    <div className=\"logo\">\n    \t<div className=\"title\"><img src={logo} width={100}/> Convert css style to flutter style</div>\n    \t<div>Source code is here \n    \t\t<a style={{padding: 6}} href=\"https://github.com/flutterkit/c2f\" target=\"_blank\">https://github.com/flutterkit/c2f</a>\n    \t</div>\n    </div>\n  );\n}\n\nexport default Logo;","import React from \"react\";\nimport { UnControlled as CodeMirror } from 'react-codemirror2';\n\nrequire('codemirror/lib/codemirror.css');\nrequire('codemirror/theme/material.css');\nrequire('codemirror/theme/monokai.css');\nrequire('codemirror/mode/css/css.js');\nrequire('codemirror/mode/dart/dart.js');\n\nclass Coder extends React.Component {\n\n  componentDidMount(){\n  }\n\n  render() {\n    return (\n      <CodeMirror className=\"code-mirror\"\n        value={this.props.value}\n        options={Object.assign({\n          theme: 'material',\n          lineNumbers: true\n        }, this.props.options)}\n        onBeforeChange={(editor, data, value) => {\n          this.setState({value});\n        }}\n        onChange={(editor, value) => {\n          console.log('controlled', {value});\n        }}\n      />\n    );\n  }\n}\n\nexport default Coder;\n","import React from \"react\";\nimport { Alert } from \"antd\";\n\nclass ResultAlert extends React.Component {\n  \n  render() {\n    return (\n      <div>\n        {false ? (\n          <Alert\n            message=\"Alert Message Text\"\n            type=\"success\"\n            banner\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default ResultAlert;\n","import postcss from \"postcss\";\nimport { promisify } from \"es6-promisify\";\n\nexport default {\n  async process(css) {\n    const result = await postcss([]).process(css);\n\n    const root = result.root;\n    if (!root) return;\n    console.log(result, root);\n\n    return new Promise(function(resolve, reject) {\n      root.walkRules(rule => {\n        console.log(rule.selector);\n\n        rule.walkDecls(decl => {\n          console.log(decl.prop + \" = \" + decl.value);\n        });\n\n        // resolve(value);\n      });\n    });\n  }\n};\n","import React from \"react\";\nimport { Row, Col, Button } from \"antd\";\nimport Coder from \"./coder\";\nimport ResultAlert from \"./result-alert\";\nimport Converter from \"../service/convert/converter\";\n\nclass OperatingArea extends React.Component {\n\n  constructor(props) {\n      super(props);\n      this.state = { cssOptions: {\n         mode: 'css',\n         //theme: 'monokai'\n      }, dartOptions: {\n         mode: 'dart',\n      }, cssVal: '', dartVal: '' };\n  }\n\n  async componentDidMount(){\n    this.setState({\n      cssVal: `\n      background-color: #e0e0e0; /* grey 300 */\n      width: 320px;\n      height: 240px;\n      font: 900 24px Georgia;\n    `,\n      dartVal:`\n    var container = new Container( // grey box\n  child: new Text(\n    \"Hello World\",\n    style: new TextStyle(\n      fontSize: 24.0\n      fontWeight: FontWeight.w900,\n      fontFamily: \"Georgia\",\n    ),\n  ),\n  width: 320.0,\n  height: 240.0,\n  color: Colors.grey[300],\n);\n    `\n    });\n\n    await Converter.process(this.state.cssVal);\n  }\n\n  clearBtnClickHandler(){\n    this.setState({ cssVal: \"\", dartVal: \"\" });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <ResultAlert />\n        <Row>\n          <Col span={12}>\n            <div className=\"coder-title\">Css</div>\n            <Coder options={this.state.cssOptions} value={this.state.cssVal} />\n          </Col>\n\n          <Col span={12}>\n            <div className=\"coder-title\">Flutter</div>\n            <Coder options={this.state.dartOptions} value={this.state.dartVal}  />\n          </Col>\n        </Row>\n\n        <Row className=\"btns\">\n          <Button type=\"danger\" onClick={this.clearBtnClickHandler.bind(this)}>Clear</Button>\n          <Button type=\"primary\">Convert</Button>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default OperatingArea;\n","import React from \"react\";\nimport { Layout } from \"antd\";\nimport Logo from \"./components/logo\";\nimport OperatingArea from \"./components/operating-area\";\n\nimport \"./App.css\";\n\nconst { Content } = Layout;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout>\n        <Content>\n        \t<Logo/>\n        \t<OperatingArea />\n        </Content>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5857ad01.png\";"],"sourceRoot":""}